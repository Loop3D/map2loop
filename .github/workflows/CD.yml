on: [push, pull_request]
name: release-please
jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff
      - name: Autoformat with black
        run: |
          black .
      - name: Lint with ruff
        run: |
          ruff check . --fix
      - name: Check for local changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "style: style fixes by ruff and autoformatting by black"
          fi
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: style fixes by ruff and autoformatting by black"
  continuous-integration:
    name: Continuous integration ${{ matrix.os }} python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(vars.BUILD_OS)}}
        python-version: ${{ fromJSON(vars.PYTHON_VERSIONS)}}
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python }}
      # Set up vcpkg and install GDAL (Unix-based systems)
      - name: Install vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh

      # Set up vcpkg and install GDAL (Windows)
      - name: Install vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat

      # Install GDAL with vcpkg (Unix-based systems)
      - name: Install GDAL with vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          ./vcpkg/vcpkg install gdal

      # Install GDAL with vcpkg (Windows)
      - name: Install GDAL with vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          .\vcpkg\vcpkg install gdal=3.7

      # Set up GDAL (Linux/macOS)
      - name: Set up GDAL (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          export PATH=$PATH:$(pwd)/vcpkg/installed/x64-linux/bin
          export PATH=$PATH:$(pwd)/vcpkg/installed/x64-osx/bin

      # Set up GDAL (Windows)
      - name: Set up GDAL (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:Path += ";$(pwd)\vcpkg\installed\x64-windows\bin"

      - name: Installing dependencies
        shell: bash -l {0}
        run: |
          conda install -c loop3d -c conda-forge --file dependencies.txt -y
          conda install pytest -y

      - name: Building and install
        shell: bash -l {0}
        run: |
          pip install .

      - name: Testing
        shell: bash -l {0}
        run: |
          pytest

  documentation-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          cp CHANGELOG.md docs/source/CHANGELOG.md
          docker build . -t=docs -f docs/Dockerfile 
          docker run -v $(pwd):/map2loop docs bash map2loop/docs/build_docs.sh
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/build/html

  release-please:
    runs-on: ubuntu-latest
    needs: continuous-integration
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v4
        id: release
        with:
          release-type: python
          package-name: map2loop
          include-v-in-tag: false
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}

  conda-build:
    name: Building conda package for python
    needs: "continuous-integration"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ${{ fromJSON(vars.PYTHON_VERSIONS)}}
    steps:
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v4
      - name: update submodules
        #       shell: bash -l {0}
        run: |
          git submodule update --init --recursive
      - name: Conda build
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN  }}
        shell: bash -l {0}
        run: |
          conda install --solver=classic -c conda-forge conda-build anaconda-client conda-libmamba-solver -y
          conda build -c conda-forge -c loop3d --output-folder conda conda --python ${{ matrix.python-version }}
          conda convert -p all conda/linux-64/*.tar.bz2 -f -o conda

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: conda-${{ matrix.os }}-${{ matrix.python-version }}
          path: conda
  
  make_sdist:
    needs: "continuous-integration"
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build SDist
        run: |
          pip install build
          python -m build

      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  conda-deploy:
    #runs all the same as the build stage but need to rerun after release created to get updated
    #tag
    name: Building conda package for python
    needs: ["release-please", conda-build]
    if: ${{ needs.release-please.outputs.release_created }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ${{ fromJSON(vars.PYTHON_VERSIONS)}}
    steps:
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v4
      - name: update submodules
        #       shell: bash -l {0}
        run: |
          git submodule update --init --recursive
      - name: Conda build
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN  }}
        shell: bash -l {0}
        run: |
          conda install --solver=classic -c conda-forge conda-build anaconda-client conda-libmamba-solver -y
          conda build -c conda-forge -c loop3d --output-folder conda conda --python ${{ matrix.python-version }}
          conda convert -p all conda/linux-64/*.tar.bz2 -f -o conda
          anaconda upload --label main conda/*/*.tar.bz2
  upload_to_pypi:
      runs-on: "ubuntu-latest"
      needs: ["release-please", make_sdist]
      if: ${{ needs.release-please.outputs.release_created }}
      permissions:
        # IMPORTANT: this permission is mandatory for trusted publishing
        id-token: write
      steps:
        - uses: actions/download-artifact@v4
          with:
            name: dist
            path: dist
        - uses: pypa/gh-action-pypi-publish@release/v1
          with:
            skip-existing: true
            verbose: true

  documentation-deploy:
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docs
          path: docs
      - name: ls
        run: |
          ls -l docs
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: docs # The folder the action should deploy.
